{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    static status = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = $a5fd07fa01589658$var$Game.initialState){\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.state = JSON.parse(JSON.stringify(initialState));\n        this.status = $a5fd07fa01589658$var$Game.status.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() === \"playing\") this.state = this.moveAndMerge(this.state, \"left\");\n    }\n    moveRight() {\n        if (this.getStatus() === \"playing\") this.state = this.moveAndMerge(this.state, \"right\");\n    }\n    moveUp() {\n        if (this.getStatus() === \"playing\") this.state = this.moveAndMerge(this.state, \"up\");\n    }\n    moveDown() {\n        if (this.getStatus() === \"playing\") this.state = this.moveAndMerge(this.state, \"down\");\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.status.playing;\n        this.addRandomTile(this.state);\n        this.addRandomTile(this.state);\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.status.idle;\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n    }\n    moveAndMerge(prevGameState, direction) {\n        const grid = JSON.parse(JSON.stringify(prevGameState));\n        const size = grid.length;\n        const moveRow = (row, reverse = false)=>{\n            if (reverse) row.reverse();\n            const nonZeroElements = row.filter((value)=>value !== 0);\n            for(let i = 0; i < nonZeroElements.length - 1; i++)if (nonZeroElements[i] === nonZeroElements[i + 1]) {\n                nonZeroElements[i] *= 2;\n                nonZeroElements[i + 1] = 0;\n                this.score += nonZeroElements[i];\n                if (this.score === 2048) this.status = $a5fd07fa01589658$var$Game.status.win;\n            }\n            const mergedElements = nonZeroElements.filter((value)=>value !== 0);\n            while(mergedElements.length < row.length)mergedElements.push(0);\n            if (reverse) mergedElements.reverse();\n            return mergedElements;\n        };\n        const getColumn = (gridToGetFrom, colIndex)=>gridToGetFrom.map((row)=>row[colIndex]);\n        const setColumn = (gridToSetTo, colIndex, newCol)=>{\n            newCol.forEach((value, rowIndex)=>{\n                gridToSetTo[rowIndex][colIndex] = value;\n            });\n        };\n        if (direction === \"left\" || direction === \"right\") {\n            const reverse = direction === \"right\";\n            for(let row = 0; row < size; row++)grid[row] = moveRow(grid[row], reverse);\n        } else if (direction === \"up\" || direction === \"down\") {\n            const reverse = direction === \"down\";\n            for(let col = 0; col < size; col++){\n                const column = getColumn(grid, col);\n                const newColumn = moveRow(column, reverse);\n                setColumn(grid, col, newColumn);\n            }\n        }\n        if (JSON.stringify(prevGameState) === JSON.stringify(grid)) {\n            if (!this.movesAvailable(prevGameState)) this.status = $a5fd07fa01589658$var$Game.status.lose;\n            return prevGameState;\n        }\n        if (this.status === \"win\") return prevGameState;\n        return this.addRandomTile(grid);\n    }\n    addRandomTile(resGrid) {\n        const size = resGrid.length;\n        const emptyCells = [];\n        for(let row = 0; row < size; row++){\n            for(let col = 0; col < size; col++)if (resGrid[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length === 0) return resGrid;\n        const [randomRow, randomCol] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        resGrid[randomRow][randomCol] = Math.random() < 0.1 ? 4 : 2;\n        return resGrid;\n    }\n    movesAvailable(grid) {\n        const size = grid.length;\n        // Check for empty cells\n        for(let row = 0; row < size; row++)for(let col = 0; col < size; col++){\n            if (grid[row][col] === 0) return true;\n        }\n        // Check for possible merges\n        for(let row = 0; row < size; row++)for(let col = 0; col < size; col++){\n            if (col < size - 1 && grid[row][col] === grid[row][col + 1]) return true; // horizontally\n            if (row < size - 1 && grid[row][col] === grid[row + 1][col]) return true; // vertically\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$table = document.querySelector(\".game-field\");\nconst $09e991522ca7e64e$var$rows = [\n    ...$09e991522ca7e64e$var$table.querySelectorAll(\".field-row\")\n];\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$lose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$win = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$updateTableCells = ()=>{\n    const gameState = $09e991522ca7e64e$var$game.getState();\n    gameState.forEach((row, i)=>{\n        row.forEach((cell, j)=>{\n            const currentCell = $09e991522ca7e64e$var$rows[i].children[j];\n            currentCell.className = \"field-cell\";\n            if (cell) {\n                currentCell.classList.add(`field-cell--${cell}`);\n                currentCell.textContent = cell;\n            } else currentCell.textContent = \"\";\n        });\n    });\n};\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    const isActive = $09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.status.playing;\n    if ($09e991522ca7e64e$var$game.status === $a5fd07fa01589658$exports.status.idle) $09e991522ca7e64e$var$game.start();\n    else $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$updateTableCells();\n    $09e991522ca7e64e$var$startBtn.className = !isActive ? \"button restart\" : \"button start\";\n    $09e991522ca7e64e$var$startBtn.textContent = !isActive ? \"Restart\" : \"Start\";\n    $09e991522ca7e64e$var$startMessage.style = `display: ${!isActive ? \"none\" : \"block\"}`;\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$lose.classList.add(\"hidden\");\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n        switch(e.key){\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            default:\n                return;\n        }\n        $09e991522ca7e64e$var$updateTableCells();\n        $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n        if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$lose.classList.toggle(\"hidden\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$win.classList.toggle(\"hidden\");\n    }\n});\n\n\n//# sourceMappingURL=index.6252b983.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startBtn = document.querySelector('.start');\nconst table = document.querySelector('.game-field');\nconst rows = [...table.querySelectorAll('.field-row')];\nconst startMessage = document.querySelector('.message-start');\nconst score = document.querySelector('.game-score');\nconst lose = document.querySelector('.message-lose');\nconst win = document.querySelector('.message-win');\n\nconst updateTableCells = () => {\n  const gameState = game.getState();\n\n  gameState.forEach((row, i) => {\n    row.forEach((cell, j) => {\n      const currentCell = rows[i].children[j];\n\n      currentCell.className = 'field-cell';\n\n      if (cell) {\n        currentCell.classList.add(`field-cell--${cell}`);\n        currentCell.textContent = cell;\n      } else {\n        currentCell.textContent = '';\n      }\n    });\n  });\n};\n\nstartBtn.addEventListener('click', () => {\n  const isActive = game.status === Game.status.playing;\n\n  if (game.status === Game.status.idle) {\n    game.start();\n  } else {\n    game.restart();\n  }\n\n  updateTableCells();\n\n  startBtn.className = !isActive ? 'button restart' : 'button start';\n  startBtn.textContent = !isActive ? 'Restart' : 'Start';\n  startMessage.style = `display: ${!isActive ? 'none' : 'block'}`;\n  score.textContent = game.getScore();\n  lose.classList.add('hidden');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (game.getStatus() === 'playing') {\n    switch (e.key) {\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n      default:\n        return;\n    }\n\n    updateTableCells();\n    score.textContent = game.getScore();\n\n    if (game.getStatus() === 'lose') {\n      lose.classList.toggle('hidden');\n    }\n\n    if (game.getStatus() === 'win') {\n      win.classList.toggle('hidden');\n    }\n  }\n});\n","'use strict';\n\nclass Game {\n  static initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  static status = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(initialState = Game.initialState) {\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.state = JSON.parse(JSON.stringify(initialState));\n    this.status = Game.status.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() === 'playing') {\n      this.state = this.moveAndMerge(this.state, 'left');\n    }\n  }\n  moveRight() {\n    if (this.getStatus() === 'playing') {\n      this.state = this.moveAndMerge(this.state, 'right');\n    }\n  }\n  moveUp() {\n    if (this.getStatus() === 'playing') {\n      this.state = this.moveAndMerge(this.state, 'up');\n    }\n  }\n  moveDown() {\n    if (this.getStatus() === 'playing') {\n      this.state = this.moveAndMerge(this.state, 'down');\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.status.playing;\n    this.addRandomTile(this.state);\n    this.addRandomTile(this.state);\n  }\n\n  restart() {\n    this.status = Game.status.idle;\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n  }\n\n  moveAndMerge(prevGameState, direction) {\n    const grid = JSON.parse(JSON.stringify(prevGameState));\n    const size = grid.length;\n\n    const moveRow = (row, reverse = false) => {\n      if (reverse) {\n        row.reverse();\n      }\n\n      const nonZeroElements = row.filter((value) => value !== 0);\n\n      for (let i = 0; i < nonZeroElements.length - 1; i++) {\n        if (nonZeroElements[i] === nonZeroElements[i + 1]) {\n          nonZeroElements[i] *= 2;\n          nonZeroElements[i + 1] = 0;\n\n          this.score += nonZeroElements[i];\n\n          if (this.score === 2048) {\n            this.status = Game.status.win;\n          }\n        }\n      }\n\n      const mergedElements = nonZeroElements.filter((value) => value !== 0);\n\n      while (mergedElements.length < row.length) {\n        mergedElements.push(0);\n      }\n\n      if (reverse) {\n        mergedElements.reverse();\n      }\n\n      return mergedElements;\n    };\n\n    const getColumn = (gridToGetFrom, colIndex) =>\n      gridToGetFrom.map((row) => row[colIndex]);\n\n    const setColumn = (gridToSetTo, colIndex, newCol) => {\n      newCol.forEach((value, rowIndex) => {\n        gridToSetTo[rowIndex][colIndex] = value;\n      });\n    };\n\n    if (direction === 'left' || direction === 'right') {\n      const reverse = direction === 'right';\n\n      for (let row = 0; row < size; row++) {\n        grid[row] = moveRow(grid[row], reverse);\n      }\n    } else if (direction === 'up' || direction === 'down') {\n      const reverse = direction === 'down';\n\n      for (let col = 0; col < size; col++) {\n        const column = getColumn(grid, col);\n        const newColumn = moveRow(column, reverse);\n\n        setColumn(grid, col, newColumn);\n      }\n    }\n\n    if (JSON.stringify(prevGameState) === JSON.stringify(grid)) {\n      if (!this.movesAvailable(prevGameState)) {\n        this.status = Game.status.lose;\n      }\n\n      return prevGameState;\n    }\n\n    if (this.status === 'win') {\n      return prevGameState;\n    }\n\n    return this.addRandomTile(grid);\n  }\n\n  addRandomTile(resGrid) {\n    const size = resGrid.length;\n    const emptyCells = [];\n\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        if (resGrid[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return resGrid;\n    }\n\n    const [randomRow, randomCol] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    resGrid[randomRow][randomCol] = Math.random() < 0.1 ? 4 : 2;\n\n    return resGrid;\n  }\n\n  movesAvailable(grid) {\n    const size = grid.length;\n\n    // Check for empty cells\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        if (grid[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    // Check for possible merges\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        if (col < size - 1 && grid[row][col] === grid[row][col + 1]) {\n          return true; // horizontally\n        }\n\n        if (row < size - 1 && grid[row][col] === grid[row + 1][col]) {\n          return true; // vertically\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","initialState","status","idle","playing","win","lose","constructor","JSON","parse","stringify","state","score","moveLeft","getStatus","moveAndMerge","moveRight","moveUp","moveDown","getScore","getState","start","addRandomTile","restart","prevGameState","direction","grid","size","length","moveRow","row","reverse","nonZeroElements","filter","value","i","mergedElements","push","getColumn","gridToGetFrom","colIndex","map","setColumn","gridToSetTo","newCol","forEach","rowIndex","col","newColumn","movesAvailable","resGrid","emptyCells","randomRow","randomCol","Math","floor","random","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startBtn","document","querySelector","$09e991522ca7e64e$var$rows","$09e991522ca7e64e$var$table","querySelectorAll","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$lose","$09e991522ca7e64e$var$win","$09e991522ca7e64e$var$updateTableCells","gameState","cell","j","currentCell","children","className","classList","add","textContent","addEventListener","isActive","style","e","preventDefault","key","toggle"],"version":3,"file":"index.6252b983.js.map"}